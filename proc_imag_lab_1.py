# -*- coding: utf-8 -*-
"""Proc_imag_lab_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oi7yRG-ysOCfqQZpnHS4KxZk8pIhT-Kx
"""

# prompt: Usa la libreria CV2 para recibir una imagen

import cv2
import numpy as np
from google.colab.patches import cv2_imshow # Necesario para visualizar en Colab
import matplotlib.pyplot as plt

# Carga la imagen (asegúrate de que la imagen esté subida a Colab)
img = cv2.imread('/content/sample_data/img_1.jpg')

# prompt: Reducir el tamaño de la imagen

# Redimensiona la imagen (ajusta el ancho y alto según sea necesario)
width = int(img.shape[1] * 0.5)  # 50% del ancho original
height = int(img.shape[0] * 0.5) # 50% del alto original
dim = (width, height)

resized_img = cv2.resize(img, dim, interpolation=cv2.INTER_AREA)

# Guarda la imagen redimensionada (opcional)
cv2.imwrite('/content/sample_data/img_1_resized.jpg', resized_img)

# Verifica si la imagen se cargó correctamente
if img is not None:
  # Convierte la imagen a escala de grises
  gray_image = cv2.cvtColor(resized_img, cv2.COLOR_BGR2GRAY)

  # Muestra la imagen negativa
  cv2_imshow(gray_image)
  cv2.waitKey(0)
  cv2.destroyAllWindows()

  # Calcula el histograma de la imagen negativa
  hist = cv2.calcHist([gray_image], [0], None, [256], [0, 256])

  # Muestra el histograma
  plt.figure()
  plt.title("Histograma de la imagen negativa")
  plt.xlabel("Intensidad")
  plt.ylabel("Frecuencia")
  plt.plot(hist)
  plt.xlim([0, 256])
  plt.show()

# Aplica el negativo a la imagen en escala de grises
  negative_image = 255 - gray_image

  # Muestra la imagen negativa
  cv2_imshow(negative_image)
  cv2.waitKey(0)
  cv2.destroyAllWindows()

    # Calcula el histograma de la imagen negativa
  hist = cv2.calcHist([negative_image], [0], None, [256], [0, 256])

  # Muestra el histograma
  plt.figure()
  plt.title("Histograma de la imagen negativa")
  plt.xlabel("Intensidad")
  plt.ylabel("Frecuencia")
  plt.plot(hist)
  plt.xlim([0, 256])
  plt.show()

brightness = 30  # Ejemplo: aumenta el brillo en 50 unidades
  adjusted_image = np.clip(gray_image + brightness, 0, 255).astype(np.uint8)

  # Muestra la imagen ajustada
  cv2_imshow(adjusted_image)
  cv2.waitKey(0)
  cv2.destroyAllWindows()

      # Calcula el histograma de la imagen negativa
  hist2 = cv2.calcHist([adjusted_image], [0], None, [256], [0, 256])

  # Muestra el histograma
  plt.figure()
  plt.title("Histograma de la imagen con brillo aumentado")
  plt.xlabel("Intensidad")
  plt.ylabel("Frecuencia")
  plt.plot(hist2)
  plt.xlim([0, 256])
  plt.show()

# Aplica la corrección gamma
gamma = 1.5  # Ajusta el valor gamma según sea necesario
gamma_corrected = np.power(gray_image / 255.0, gamma) * 255.0
gamma_corrected = gamma_corrected.astype(np.uint8)

# Muestra la imagen corregida con gamma
cv2_imshow(gamma_corrected)
cv2.waitKey(0)
cv2.destroyAllWindows()

# Calcula el histograma de la imagen con corrección gamma
hist3 = cv2.calcHist([gamma_corrected], [0], None, [256], [0, 256])

# Muestra el histograma
plt.figure()
plt.title("Histograma de la imagen con corrección gamma")
plt.xlabel("Intensidad")
plt.ylabel("Frecuencia")
plt.plot(hist3)
plt.xlim([0, 256])
plt.show()

# Aplica el contraste logarítmico
c = 255 / np.log(1 + np.max(gray_image))
log_transformed = c * np.log(1 + gray_image)

# Convierte a uint8
log_transformed = np.array(log_transformed, dtype = np.uint8)


# Muestra la imagen transformada logarítmicamente
cv2_imshow(log_transformed)
cv2.waitKey(0)
cv2.destroyAllWindows()

# Calcula el histograma de la imagen transformada logarítmicamente
hist4 = cv2.calcHist([log_transformed], [0], None, [256], [0, 256])

# Muestra el histograma
plt.figure()
plt.title("Histograma de la imagen con contraste logarítmico")
plt.xlabel("Intensidad")
plt.ylabel("Frecuencia")
plt.plot(hist4)
plt.xlim([0, 256])
plt.show()

brightness2 = -100  # Ejemplo: aumenta el brillo en 50 unidades
  adjusted_image = np.clip(gray_image + brightness2, 0, 255).astype(np.uint8)

  # Muestra la imagen ajustada
  cv2_imshow(adjusted_image)
  cv2.waitKey(0)
  cv2.destroyAllWindows()

      # Calcula el histograma de la imagen negativa
  hist2 = cv2.calcHist([adjusted_image], [0], None, [256], [0, 256])

  # Muestra el histograma
  plt.figure()
  plt.title("Histograma de la imagen con brillo disminuido")
  plt.xlabel("Intensidad")
  plt.ylabel("Frecuencia")
  plt.plot(hist2)
  plt.xlim([0, 256])
  plt.show()

# prompt:  aplicar Contraste exponencial a la imagen

# Aplica el contraste exponencial
gamma2 = 1.5  # Ajusta el valor gamma según sea necesario. Valores menores a 1 oscurecen la imagen, mayores la aclaran
exp_transformed = np.power(gray_image / 255.0, gamma2) * 255.0
exp_transformed = exp_transformed.astype(np.uint8)

# Muestra la imagen transformada exponencialmente
cv2_imshow(exp_transformed)
cv2.waitKey(0)
cv2.destroyAllWindows()

# Calcula el histograma de la imagen transformada exponencialmente
hist5 = cv2.calcHist([exp_transformed], [0], None, [256], [0, 256])

# Muestra el histograma
plt.figure()
plt.title("Histograma de la imagen con contraste exponencial")
plt.xlabel("Intensidad")
plt.ylabel("Frecuencia")
plt.plot(hist5)
plt.xlim([0, 256])
plt.show()

# Normaliza la imagen a un rango de 0 a 100
normalized_image = cv2.normalize(gray_image, None, 0, 100, cv2.NORM_MINMAX)

# Muestra la imagen normalizada
cv2_imshow(normalized_image.astype(np.uint8)) # Convierte a uint8 para visualización
cv2.waitKey(0)
cv2.destroyAllWindows()

# Calcula el histograma de la imagen normalizada
hist_norm = cv2.calcHist([normalized_image], [0], None, [101], [0, 101]) # Rango 0-100, 101 bins

# Muestra el histograma
plt.figure()
plt.title("Histograma de la imagen normalizada (0-100)")
plt.xlabel("Intensidad")
plt.ylabel("Frecuencia")
plt.plot(hist_norm)
plt.xlim([0, 100])
plt.show()

# Normaliza la imagen a un rango de -1 a 1
normalized_image_minus1_1 = cv2.normalize(gray_image, None, -1, 1, cv2.NORM_MINMAX)

# Muestra la imagen normalizada
cv2_imshow((normalized_image_minus1_1 * 127.5 + 127.5).astype(np.uint8)) # Escala para visualización
cv2.waitKey(0)
cv2.destroyAllWindows()

# Calcula el histograma de la imagen normalizada
hist_norm_minus1_1 = cv2.calcHist([normalized_image_minus1_1], [0], None, [256], [-1, 1])

# Muestra el histograma
plt.figure()
plt.title("Histograma de la imagen normalizada (-1 a 1)")
plt.xlabel("Intensidad")
plt.ylabel("Frecuencia")
plt.plot(hist_norm_minus1_1)
plt.xlim([-1, 1])
plt.show()